class AtmEntity
{

    private double balance;

    private double withdrawAmount;

    private double depositAmount;

    public AtmEntity()
    {
        // constructor
    }

    public void setBalance(double balance){
        this.balance=balance;
    }


    public  double getBalance(){
        return balance;
    }

    public void setWithdrawAmount(double withdrawAmount){
           this.withdrawAmount=withdrawAmount;
    }

    public  double getWithdrawAmount(){
        return withdrawAmount;
    }

    public void setDepositAmount(double depositAmount){
           this.depositAmount=depositAmount;
    }

    public  double getDepositAmount(){
        return depositAmount;
    }
 
}


public interface Atmnterface{

    public void withdraw(double withdrawAmount);
  
    public void deposit(double depositAmount);
  
    public void transactionHistory();
  
    public void transfer(double transferAmount);  
  
    public void viewBalance();
  }

import java.util.HashMap;
import java.util.Map;

class Implement implements Atmnterface{
       
   AtmEntity atm = new AtmEntity();

   Map<Double,String> statement=new HashMap<>();


 @Override
  public void withdraw(double withdrawAmount)
  {
      if(withdrawAmount % 500 == 0)
      {
         if(withdrawAmount<atm.getBalance())
         {
            statement.put(withdrawAmount,"Amount Withdrawn");

            System.out.println("Collect your Case "+withdrawAmount);
            double totalAmount=atm.getBalance()-withdrawAmount;
            atm.setBalance(totalAmount);
            viewBalance();
         }
         else 
         {
            System.out.println("Insufficient Balance !!");
         }
      }
      else{
         System.out.println("Please Enter the amount in multiple of 500");
      }
  }

  @Override
  public void deposit(double depositAmount)
  {
      statement.put(depositAmount,"Amount Deposited");

      System.out.println(depositAmount+" , Deposited Successfully!!");
      double totalAmount=atm.getBalance()+depositAmount;
      atm.setBalance(totalAmount);
      viewBalance();
   }

  @Override
  public void transactionHistory()
  {
      for(Map.Entry<Double,String> m:statement.entrySet())
      {
         System.out.println(m.getKey()+" : "+m.getValue());
      }
  }

  @Override
  public void transfer(double transferAmount)
  {
      if(transferAmount<atm.getBalance())
      {
         statement.put(transferAmount,"Amount Transfered");
         double totalAmount=atm.getBalance()-transferAmount;
         atm.setBalance(totalAmount);
      }
      else 
      {
         System.out.println("Insufficient Balance !!");
      }
  }

  @Override
  public void viewBalance()
  {
     System.out.println("Available Balance is : "+atm.getBalance());
  }

}

import java.util.Scanner;

 public class ATM_Main{

    public static void main(String[] args){

    AtmInterface ai= new Implement();

    Scanner sc = new Scanner(System.in);
    System.out.println("----------------------------------");
    System.out.println(" !! WELCOME TO ATM MACHINE !! ");
    System.out.println("----------------------------------");

    System.out.println("Enter your user ID : ");
    int id= sc.nextInt();
 
    System.out.println("Enter your user Pin : ");
    int pin= sc.nextInt();

    System.out.println();

    if(check_id_pin(id,pin))
    {  
        while(true)
        {

        System.out.println("Enter 1 , for Transaction History");
        System.out.println("Enter 2 , for Withdraw");
        System.out.println("Enter 3 , for Deposit");
        System.out.println("Enter 4 , for Transfer money");
        System.out.println("Enter 5 , for View Available Balance");
        System.out.println("enter 6  ,for Quit");
        int ch=sc.nextInt();

        switch(ch)
        {
            case 1:
                 ai.transactionHistory();
            break;

            case 2:
                System.out.println("Enter Amount To Withdraw");
                double withdrawAmount = sc.nextDouble();
                ai.withdraw(withdrawAmount);
                
            break;

            case 3:
                System.out.println("Enter Amount To Deposit");
                double depositAmount = sc.nextDouble();
                ai.deposit(depositAmount);
                
            break;

            case 4:
                System.out.println("Enter Transaction ID");
                int tranID=sc.nextInt();
                if(tranID==5678)
                {
                    System.out.println("Enter Amount To Transfer");
                    double transferAmount = sc.nextDouble();
                    ai.transfer(transferAmount);
                    System.out.println("SUCCESSFULLY TRANSFERED AMOUNT TO "+ tranID);
                    ai.viewBalance();
                }
                else 
                {
                    System.out.println("Invalid Transasction ID..");
                }
            break;

            case 5:
                ai.viewBalance();
            break;

            case 6:
                System.out.println("COLLECT YOUR ATM CARD\n THANK YOU FOR USING ATM MACHINE .");
                System.exit(0);
            break;
               
        }
        }
    }
    else
    {
    System.out.println("INVALID USERID OR PIN");
    }

    }

    public static boolean check_id_pin(int id,int pin)
    {
        if(id==12345 && pin==54321)
        {
        return true;
        }
        else
        {
        return false;
        }
    }
}
